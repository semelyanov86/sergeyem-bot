<?php

declare(strict_types=1);

namespace App\Telegram;

use App\Data\CreateWordData;
use App\Enums\ChatStateEnum;
use App\Services\EasywordsConnector;
use DefStudio\Telegraph\Enums\ChatActions;
use DefStudio\Telegraph\Keyboard\ReplyButton;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use Illuminate\Support\Stringable;

trait EasywordsTelegramTrait
{
    public function random(string $number): void
    {
        $this->chat->action(ChatActions::TYPING)->send();
        $msg = '–°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤ üëá' . PHP_EOL;
        if (! $number) {
            $number = 10;
        }
        $number = (int) $number;
        $words = app(EasywordsConnector::class)->getRandomWords($number);
        foreach ($words as $key => $word) {
            $msg .= $key + 1 . '. <b>' . $word->original . '</b> - ' . $word->translated . PHP_EOL;
        }
        $this->reply($msg);
    }

    public function saveword(): void
    {
        $this->chat->state = ChatStateEnum::ASK_WORD_ORIGINAL;
        $this->chat->context = [];
        $this->chat->save();
        $this->reply('–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.' . PHP_EOL . '–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞.');
    }

    /**
     * @param  array<string, scalar>|null  $context
     */
    public function askWordOriginal(Stringable $text, ?array $context): void
    {
        if (! $text->value()) {
            $this->reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');

            return;
        }
        $this->chat->state = ChatStateEnum::ASK_WORD_TRANSLATION;
        $context['original'] = $text->value();
        $this->chat->context = $context;
        $this->chat->save();
        $this->reply('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:');
    }

    /**
     * @param  array<string, scalar>|null  $context
     */
    public function askWordTranslation(Stringable $text, ?array $context): void
    {
        if (! $text->value()) {
            $this->reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');

            return;
        }
        $this->chat->state = ChatStateEnum::ASK_WORD_LANGUAGE;
        $context['translated'] = $text->value();
        $this->chat->context = $context;
        $this->chat->save();
        $this->chat->message('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:')->replyKeyboard(ReplyKeyboard::make()->buttons([
            ReplyButton::make('DE'),
            ReplyButton::make('EN'),
        ])->oneTime())->send();
    }

    /**
     * @param  array<string, scalar>|null  $context
     */
    public function askWordLanguage(Stringable $text, ?array $context): void
    {
        $this->chat->action(ChatActions::TYPING)->send();
        if (! $context) {
            $this->chat->message('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ')->removeReplyKeyboard()->send();

            return;
        }
        if (! $text->value()) {
            $this->chat->message('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')->removeReplyKeyboard()->send();

            return;
        }
        $this->chat->state = ChatStateEnum::ACTIVE;
        $this->chat->context = [];
        $this->chat->save();
        $result = app(EasywordsConnector::class)->saveWord(CreateWordData::from($context));
        $this->chat->message('–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ' . $result->id)->removeReplyKeyboard()->send();
    }
}
